package entityClasses;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

/*******
 * <p> Title: Post Class </p>
 * 
 * <p> Description: The Post class defines the data and operations for a discussion post created by a student. 
 * It represents one entry in the discussion system and stores identifying details, ownership, content, timestamps, 
 * and deletion status. The class supports all CRUD operations (Create, Read, Update, Delete) and includes input 
 * validation as specified in the requirements. </p>
 *
 * <p> The Post class enables multiple student user stories, including creating a new post, editing one’s own post, 
 * deleting one’s own post, and searching or viewing posts by title or content. The validation and permission methods 
 * make it so that students can only modify their own posts while maintaining proper timestamps for staff review. </p>
 * 
 * <p> Copyright: Joseph © 2025 </p>
 * 
 * @author Joseph and Vrishik
 * 
 * @version 2.00		2025-10-19 TP2 Updated Javadoc Version
 */ 

public class Post {
	
	/*
	 * These are the private attributes for this entity object
	 */
	
    /** Unique identifier for the post, generated by the system for tracking and database storage. */
    private String postId;
    
    /** The title of the post, entered by the author. Limited in length for readability. */
    private String title;
    
    /** The main content/body of the post. Represents the student’s discussion message. */
    private String body;
    
    /** Username of the student who created the post. Used for access control and filtering. */
    private String authorUsername;
    
    /** The discussion thread to which this post belongs. Defaults to "General" if not specified. */
    private String thread;
    
    /** The timestamp indicating when the post was first created. */
    private LocalDateTime createdAt;
    
    /** The timestamp of the last time this post was edited. Null if never edited. */
    private LocalDateTime lastEditedAt;
    
    /** Boolean flag showing whether the post is deleted. */
    private boolean isDeleted;
    
    // Constants for validation
    
    /** Maximum allowed number of characters in a post title. */
    public static final int MAX_TITLE_LENGTH = 100;
    
    /** Maximum allowed number of characters in a post body. */
    public static final int MAX_BODY_LENGTH = 5000;
    
    /** Default thread name used if no specific discussion thread is provided. */
    public static final String DEFAULT_THREAD = "General";
    
    /*****
     * <p> Method: Post() </p>
     * 
     * <p> Description: This default constructor is not used in this system. </p>
     */
    public Post() {
    	
    }

    /*****
     * <p> Method: Post(String postId, String title, String body, String authorUsername, String thread) </p>
     * 
     * <p> Description: This constructor is used to establish post entity objects. </p>
     * 
     * @param postId specifies the unique identifier for this post
     * @param title specifies the title of the post
     * @param body specifies the content/body of the post
     * @param authorUsername specifies the username of the post author
     * @param thread specifies the thread this post belongs to
     */
    public Post(String postId, String title, String body, String authorUsername, String thread) {
        this.postId = postId;
        this.title = title;
        this.body = body;
        this.authorUsername = authorUsername;
        this.thread = (thread != null && !thread.trim().isEmpty()) ? thread : DEFAULT_THREAD;
        this.createdAt = LocalDateTime.now();
        this.lastEditedAt = null;
        this.isDeleted = false;
    }

    /*****
     * <p> Method: validatePost() </p>
     *
     * <p> Description: Checks whether the post’s title and body meet validation rules. Ensures 
     * that a student cannot submit an empty post or exceed length limits. Supports the student feature 
     * that allows submitting valid discussion posts while generating clear error messages for invalid input. </p>
     *
     * @return an empty string if valid, or a descriptive error message if validation fails
     */
    public String validatePost() {
    	
    	// Requirement: Supports Student User Story – Create Post
        if (title == null || title.trim().isEmpty()) {
            return "Post title cannot be empty.";
        }
        
        if (body == null || body.trim().isEmpty()) {
            return "Post body cannot be empty.";
        }
        
        if (title.length() > MAX_TITLE_LENGTH) {
            return "Post title cannot exceed " + MAX_TITLE_LENGTH + " characters.";
        }
        
        if (body.length() > MAX_BODY_LENGTH) {
            return "Post body cannot exceed " + MAX_BODY_LENGTH + " characters.";
        }
        
        return ""; // Valid
    }

    /*****
     * <p> Method: canEdit(String currentUsername) </p>
     *
     * <p> Description: Determines whether the specified user has permission to edit this post. 
     * Supports the student feature that allows editing one’s own post while preventing modification 
     * by other users. </p>
     *
     * @param currentUsername the username of the currently logged-in user
     * @return true if the post can be edited by this user, false otherwise
     */
    public boolean canEdit(String currentUsername) {
        return !isDeleted && authorUsername.equals(currentUsername);
    }

    /*****
     * <p> Method: canDelete(String currentUsername) </p>
     *
     * <p> Description: Determines whether the specified user has permission to delete this post. 
     * Supports the student feature that allows removing one’s own post while maintaining data integrity. </p>
     *
     * @param currentUsername the username of the currently logged-in user
     * @return true if the user can delete this post, false otherwise
     */
    public boolean canDelete(String currentUsername) {
        return !isDeleted && authorUsername.equals(currentUsername);
    }

    /*****
     * <p> Method: markAsDeleted() </p>
     *
     * <p> Description: Marks this post as deleted without removing it from storage.
     * Supports moderation features that allow staff to view deleted posts if needed. </p>
     */
    public void markAsDeleted() {
        this.isDeleted = true;
    }

    /*****
     * <p> Method: updateContent(String newTitle, String newBody) </p>
     *
     * <p> Description: Updates the title and body of this post and records the edit timestamp. 
     * Supports the student feature that allows editing an existing post while 
     * audits changes for staff oversight. </p>
     *
     * @param newTitle the updated title for the post
     * @param newBody the updated content body for the post
     */
    public void updateContent(String newTitle, String newBody) {
        this.title = newTitle;
        this.body = newBody;
        this.lastEditedAt = LocalDateTime.now();
    }

    /*****
     * <p> Method: matchesSearch(String keyword) </p>
     *
     * <p> Description: Checks whether the post’s title or body contains a given search keyword. 
     * Supports the student feature that allows searching for posts by keyword or phrase in order 
     * to find relevant discussions. </p>
     *
     * @param keyword the word or phrase to search for
     * @return true if this post contains the keyword, false otherwise
     */
    public boolean matchesSearch(String keyword) {
        if (keyword == null || keyword.trim().isEmpty()) {
            return true; // Empty keyword matches all
        }
        
        String lowerKeyword = keyword.toLowerCase();
        return (title != null && title.toLowerCase().contains(lowerKeyword)) ||
               (body != null && body.toLowerCase().contains(lowerKeyword));
    }

    /*****
     * <p> Method: String getFormattedCreatedAt() </p>
     * 
     * <p> Description: Returns a formatted string of the creation timestamp. </p>
     * 
     * @return formatted creation timestamp
     * 
     */
    public String getFormattedCreatedAt() {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        return createdAt.format(formatter);
    }

    /*****
     * <p> Method: String getFormattedLastEditedAt() </p>
     * 
     * <p> Description: Returns a formatted string of the last edit timestamp. </p>
     * 
     * @return formatted edit timestamp or "Never" if not edited
     * 
     */
    public String getFormattedLastEditedAt() {
        if (lastEditedAt == null) {
            return "Never";
        }
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        return lastEditedAt.format(formatter);
    }

    // Getters and Setters

    /** 
     * Returns the unique ID assigned to this post.
     * 
     * @return the post ID
     */
    public String getPostId() { 
        return postId; 
    }

    /** 
     * Sets the unique ID for this post.
     * 
     * @param postId the ID to assign
     */
    public void setPostId(String postId) { 
        this.postId = postId; 
    }

    /** 
     * Returns the title of this post.
     * 
     * @return the post title
     */
    public String getTitle() { 
        return title; 
    }
    
    /** 
     * Sets the title for this post.
     * 
     * @param title the title text to assign
     */
    public void setTitle(String title) { 
        this.title = title; 
    }

    /** 
     * Returns the body (main content) of this post.
     * 
     * @return the post body text
     */
    public String getBody() { 
        return body; 
    }

    /** 
     * Sets the body (main content) of this post.
     * 
     * @param body the content text to assign to this post
     */
    public void setBody(String body) { 
        this.body = body; 
    }

    /** 
     * Returns the username of the author who created this post.
     * 
     * @return the author’s username
     */
    public String getAuthorUsername() { 
        return authorUsername; 
    }

    /** 
     * Sets the username of the author who created this post.
     * 
     * @param authorUsername the author’s username to assign
     */
    public void setAuthorUsername(String authorUsername) { 
        this.authorUsername = authorUsername; 
    }

    /** 
     * Returns the discussion thread that this post belongs to.
     * 
     * @return the thread name
     */
    public String getThread() { 
        return thread; 
    }

    /** 
     * Sets the discussion thread that this post belongs to.
     * 
     * @param thread the thread name to assign
     */
    public void setThread(String thread) { 
        this.thread = thread; 
    }

    /** 
     * Returns the date and time when this post was created.
     * 
     * @return the creation timestamp
     */
    public LocalDateTime getCreatedAt() { 
        return createdAt; 
    }

    /** 
     * Sets the creation timestamp for this post.
     * 
     * @param createdAt the creation time to assign
     */
    public void setCreatedAt(LocalDateTime createdAt) { 
        this.createdAt = createdAt; 
    }

    /** 
     * Returns the timestamp of the last time this post was edited.
     * 
     * @return the last edit time, or null if never edited
     */
    public LocalDateTime getLastEditedAt() { 
        return lastEditedAt; 
    }

    /** 
     * Sets the timestamp for the last time this post was edited.
     * 
     * @param lastEditedAt the edit time to assign
     */
    public void setLastEditedAt(LocalDateTime lastEditedAt) { 
        this.lastEditedAt = lastEditedAt; 
    }

    /** 
     * Checks whether this post has been marked as deleted.
     * 
     * @return true if the post is deleted, false otherwise
     */
    public boolean isDeleted() { 
        return isDeleted; 
    }

    /** 
     * Sets the deletion status of this post.
     * 
     * @param deleted true to mark the post as deleted, false otherwise
     */
    public void setDeleted(boolean deleted) { 
        this.isDeleted = deleted; 
    }
}